# GitHub Action for Laravel with MySQL and Node
name: Testing Laravel with MySQL and Node
on: [ push, pull_request ]
jobs:
  laravel:
    name: Laravel (PHP ${{ matrix.php-versions }}, Node ${{ matrix.node-version }}, Dependency version ${{ matrix.dependency-version }})
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redisl
      SESSION_DRIVER: redis
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=laravel --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: [ '8.0', '7.4' ]
        node-version: [ 14, 12 ]
        dependency-version: [prefer-lowest, prefer-stable]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug #optional
          
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install PHP 7 dependencies
        run: composer update --${{ matrix.dependency-version }} --no-interaction --no-progress
        if: "matrix.php < 8"

      - name: Install PHP 8 dependencies
        run: composer update --${{ matrix.dependency-version }} --ignore-platform-req=php --no-interaction --no-progress
        if: "matrix.php >= 8"
        
      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate
          
      - name: Clear Config
        run: php artisan config:clear
      
      - name: Run Migration
        run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      
      - name: Unit Tests
        run: ./vendor/bin/pest --colors=always
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
        
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run production
